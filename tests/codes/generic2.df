
class A
{
  value:int;
  init(x:int){ value =x;}
}

class B
{
  value:int;
  init(x:int){ value =x;}
}

struct C
{
  value:int;
  init(x:int){ value =x;}
}
 
func foo<T>(t:T):T
{
	return t
}


class Pair<K,V>
{
   a:K
   b:V
   init(x:K,y:V)
   {
    a=x
	b=y
   }
   func left():K => return a
   func right():V => return b
   func foo<T>(t:T):T=>return t
}

var a = A(1)
var f = foo<A>(a)
a.value=11
var b = B(2)
var c = C(3)
var p=Pair<A,B>(a,b)
var p2=Pair<B,A>(b,a)



printf("a: %d f: %d b:%d \n",a.value,f.value,b.value)
printf("pair.a: %d pair.b: %d \n",p.left().value,p.right().value)
printf("pair2.b: %d pair2.a: %d \n",p2.left().value,p2.right().value)
a.value=111
b.value=222
printf("pair.a: %d pair.b: %d \n",p.left().value,p.right().value)
printf("pair2.b: %d pair2.a: %d \n",p2.left().value,p2.right().value)

var p3=Pair<B,C>(b,c)
printf("pair3.b: %d pair3.c: %d \n",p3.left().value,p3.right().value)
c.value=333
printf("pair3.b: %d pair3.c: %d \n",p3.left().value,p3.right().value)
printf("p3 . a :%d \n",p3.foo<A>(a).value)