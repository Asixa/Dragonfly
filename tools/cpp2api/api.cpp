// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("test.ll", getGlobalContext());
 mod->setDataLayout("e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-f80:128:128-v64:64:64-v128:128:128-a0:0:64-f80:32:32-n8:16:32-S32");
 mod->setTargetTriple("i686-pc-mingw32");
 
 // Type Definitions
 StructType *StructTy_struct_A = mod->getTypeByName("struct.A");
 if (!StructTy_struct_A) {
 StructTy_struct_A = StructType::create(mod->getContext(), "struct.A");
 }
 std::vector<Type*>StructTy_struct_A_fields;
 StructTy_struct_A_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_A_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct_A->isOpaque()) {
 StructTy_struct_A->setBody(StructTy_struct_A_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_0 = PointerType::get(StructTy_struct_A, 0);
 
 std::vector<Type*>StructTy_2_fields;
 StructTy_2_fields.push_back(IntegerType::get(mod->getContext(), 32));
 std::vector<Type*>FuncTy_4_args;
 FunctionType* FuncTy_4 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_4_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_3 = PointerType::get(FuncTy_4, 0);
 
 StructTy_2_fields.push_back(PointerTy_3);
 StructType *StructTy_2 = StructType::get(mod->getContext(), StructTy_2_fields, /*isPacked=*/false);
 
 ArrayType* ArrayTy_1 = ArrayType::get(StructTy_2, 1);
 
 PointerType* PointerTy_5 = PointerType::get(ArrayTy_1, 0);
 
 std::vector<Type*>FuncTy_7_args;
 FuncTy_7_args.push_back(PointerTy_0);
 FuncTy_7_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_7 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_7_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_6 = PointerType::get(FuncTy_7, 0);
 
 PointerType* PointerTy_8 = PointerType::get(PointerTy_0, 0);
 
 PointerType* PointerTy_9 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 std::vector<Type*>FuncTy_10_args;
 FunctionType* FuncTy_10 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_10_args,
  /*isVarArg=*/false);
 
 
 // Function Declarations
 
 Function* func___cxx_global_var_init = mod->getFunction("__cxx_global_var_init");
 if (!func___cxx_global_var_init) {
 func___cxx_global_var_init = Function::Create(
  /*Type=*/FuncTy_4,
  /*Linkage=*/GlobalValue::InternalLinkage,
  /*Name=*/"__cxx_global_var_init", mod); 
 func___cxx_global_var_init->setCallingConv(CallingConv::C);
 }
 AttributeSet func___cxx_global_var_init_PAL;
 func___cxx_global_var_init->setAttributes(func___cxx_global_var_init_PAL);
 
 Function* func__ZN1AC2Ei = mod->getFunction("_ZN1AC2Ei");
 if (!func__ZN1AC2Ei) {
 func__ZN1AC2Ei = Function::Create(
  /*Type=*/FuncTy_7,
  /*Linkage=*/GlobalValue::LinkOnceODRLinkage ,
  /*Name=*/"_ZN1AC2Ei", mod); 
 func__ZN1AC2Ei->setCallingConv(CallingConv::C);
 func__ZN1AC2Ei->setAlignment(2);
 }
 AttributeSet func__ZN1AC2Ei_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__ZN1AC2Ei_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__ZN1AC2Ei->setAttributes(func__ZN1AC2Ei_PAL);
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_10,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func__GLOBAL__I_a = mod->getFunction("_GLOBAL__I_a");
 if (!func__GLOBAL__I_a) {
 func__GLOBAL__I_a = Function::Create(
  /*Type=*/FuncTy_4,
  /*Linkage=*/GlobalValue::InternalLinkage,
  /*Name=*/"_GLOBAL__I_a", mod); 
 func__GLOBAL__I_a->setCallingConv(CallingConv::C);
 }
 AttributeSet func__GLOBAL__I_a_PAL;
 func__GLOBAL__I_a->setAttributes(func__GLOBAL__I_a_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_struct_a = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/StructTy_struct_A,
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"a");
 gvar_struct_a->setAlignment(4);
 
 GlobalVariable* gvar_array_llvm_global_ctors = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_1,
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::AppendingLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"llvm.global_ctors");
 
 // Constant Definitions
 ConstantAggregateZero* const_struct_11 = ConstantAggregateZero::get(StructTy_struct_A);
 std::vector<Constant*> const_array_12_elems;
 std::vector<Constant*> const_struct_13_fields;
 ConstantInt* const_int32_14 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("65535"), 10));
 const_struct_13_fields.push_back(const_int32_14);
 const_struct_13_fields.push_back(func__GLOBAL__I_a);
 Constant* const_struct_13 = ConstantStruct::get(StructTy_2, const_struct_13_fields);
 const_array_12_elems.push_back(const_struct_13);
 Constant* const_array_12 = ConstantArray::get(ArrayTy_1, const_array_12_elems);
 ConstantInt* const_int32_15 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2333"), 10));
 ConstantInt* const_int32_16 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_17 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 
 // Global Variable Definitions
 gvar_struct_a->setInitializer(const_struct_11);
 gvar_array_llvm_global_ctors->setInitializer(const_array_12);
 
 // Function Definitions
 
 // Function: __cxx_global_var_init (func___cxx_global_var_init)
 {
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func___cxx_global_var_init,0);
  
  // Block entry (label_entry)
  std::vector<Value*> void_18_params;
  void_18_params.push_back(gvar_struct_a);
  void_18_params.push_back(const_int32_15);
  CallInst* void_18 = CallInst::Create(func__ZN1AC2Ei, void_18_params, "", label_entry);
  void_18->setCallingConv(CallingConv::C);
  void_18->setTailCall(false);
  AttributeSet void_18_PAL;
  void_18->setAttributes(void_18_PAL);
  
  ReturnInst::Create(mod->getContext(), label_entry);
  
 }
 
 // Function: _ZN1AC2Ei (func__ZN1AC2Ei)
 {
  Function::arg_iterator args = func__ZN1AC2Ei->arg_begin();
  Value* ptr_this = args++;
  ptr_this->setName("this");
  Value* int32_x = args++;
  int32_x->setName("x");
  
  BasicBlock* label_entry_20 = BasicBlock::Create(mod->getContext(), "entry",func__ZN1AC2Ei,0);
  
  // Block entry (label_entry_20)
  AllocaInst* ptr_this_addr = new AllocaInst(PointerTy_0, "this.addr", label_entry_20);
  ptr_this_addr->setAlignment(4);
  AllocaInst* ptr_x_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "x.addr", label_entry_20);
  ptr_x_addr->setAlignment(4);
  StoreInst* void_21 = new StoreInst(ptr_this, ptr_this_addr, false, label_entry_20);
  void_21->setAlignment(4);
  StoreInst* void_22 = new StoreInst(int32_x, ptr_x_addr, false, label_entry_20);
  void_22->setAlignment(4);
  LoadInst* ptr_this1 = new LoadInst(ptr_this_addr, "this1", false, label_entry_20);
  LoadInst* int32_23 = new LoadInst(ptr_x_addr, "", false, label_entry_20);
  int32_23->setAlignment(4);
  std::vector<Value*> ptr_size_indices;
  ptr_size_indices.push_back(const_int32_17);
  ptr_size_indices.push_back(const_int32_17);
  Instruction* ptr_size = GetElementPtrInst::Create(ptr_this1, ptr_size_indices, "size", label_entry_20);
  StoreInst* void_24 = new StoreInst(int32_23, ptr_size, false, label_entry_20);
  void_24->setAlignment(4);
  LoadInst* int32_25 = new LoadInst(ptr_x_addr, "", false, label_entry_20);
  int32_25->setAlignment(4);
  std::vector<Value*> ptr_align_indices;
  ptr_align_indices.push_back(const_int32_17);
  ptr_align_indices.push_back(const_int32_16);
  Instruction* ptr_align = GetElementPtrInst::Create(ptr_this1, ptr_align_indices, "align", label_entry_20);
  StoreInst* void_26 = new StoreInst(int32_25, ptr_align, false, label_entry_20);
  void_26->setAlignment(4);
  ReturnInst::Create(mod->getContext(), label_entry_20);
  
 }
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_entry_28 = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
  
  // Block entry (label_entry_28)
  ReturnInst::Create(mod->getContext(), const_int32_17, label_entry_28);
  
 }
 
 // Function: _GLOBAL__I_a (func__GLOBAL__I_a)
 {
  
  BasicBlock* label_entry_30 = BasicBlock::Create(mod->getContext(), "entry",func__GLOBAL__I_a,0);
  
  // Block entry (label_entry_30)
  CallInst* void_31 = CallInst::Create(func___cxx_global_var_init, "", label_entry_30);
  void_31->setCallingConv(CallingConv::C);
  void_31->setTailCall(false);
  AttributeSet void_31_PAL;
  void_31->setAttributes(void_31_PAL);
  
  ReturnInst::Create(mod->getContext(), label_entry_30);
  
 }
 
 return mod;
}
